"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Message = (function () {
    function Message() {
        this._evtObjs = Object.create(null);
    }
    Message.prototype.on = function (evtType, handler, once) {
        var _this = this;
        if (once === void 0) { once = false; }
        if (!this._evtObjs[evtType]) {
            this._evtObjs[evtType] = [];
        }
        this._evtObjs[evtType].push({
            handler: handler,
            once: once,
            called: false
        });
        return function () {
            _this.off(evtType, handler);
        };
    };
    Message.prototype.off = function (evtType, handler) {
        var _this = this;
        var types;
        if (evtType) {
            types = [evtType];
        }
        else {
            types = Object.keys(this._evtObjs);
        }
        types.forEach(function (type) {
            if (!handler) {
                _this._evtObjs[type] = [];
            }
            else {
                var handlers = _this._evtObjs[type] || [];
                var nextHandlers = [];
                handlers.forEach(function (evtObj) {
                    if (evtObj.handler !== handler) {
                        nextHandlers.push(evtObj);
                    }
                });
                _this._evtObjs[type] = nextHandlers;
            }
        });
        return this;
    };
    Message.prototype.emit = function (evtType) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var handlers = this._evtObjs[evtType] || [];
        handlers.forEach(function (evtObj) {
            _this.call(evtObj, args);
        });
    };
    Message.prototype.emitFirst = function (evtType) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var handlers = this._evtObjs[evtType] || [];
        this.call(handlers[0], args);
    };
    Message.prototype.call = function (evtObj, args) {
        if (!evtObj)
            return;
        if (evtObj.once && evtObj.called)
            return;
        evtObj.called = true;
        try {
            evtObj.handler && evtObj.handler.apply(null, args);
        }
        catch (e) {
            console.error(e.stack || e.message || e);
        }
    };
    return Message;
}());
exports.Message = Message;
exports.default = new Message();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1lc3NhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFlQTtJQU1JO1FBQ0ksSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFRRCxvQkFBRSxHQUFGLFVBQUksT0FBZSxFQUFFLE9BQWlCLEVBQUUsSUFBb0I7UUFBNUQsaUJBWUM7UUFadUMscUJBQUEsRUFBQSxZQUFvQjtRQUN4RCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUMvQjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3hCLE9BQU8sU0FBQTtZQUNQLElBQUksTUFBQTtZQUNKLE1BQU0sRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQztRQUNILE9BQU87WUFDSCxLQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUM7SUFDTixDQUFDO0lBT0QscUJBQUcsR0FBSCxVQUFLLE9BQWdCLEVBQUUsT0FBa0I7UUFBekMsaUJBeUJDO1FBeEJHLElBQUksS0FBSyxDQUFDO1FBQ1YsSUFBSSxPQUFPLEVBQUU7WUFDVCxLQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNyQjthQUFNO1lBQ0gsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUk7WUFDZixJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUVWLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNILElBQUksUUFBUSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUN6QyxJQUFJLFlBQVksR0FBbUIsRUFBRSxDQUFDO2dCQUV0QyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBTTtvQkFDcEIsSUFBSSxNQUFNLENBQUMsT0FBTyxLQUFLLE9BQU8sRUFBRTt3QkFDNUIsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztxQkFDN0I7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxZQUFZLENBQUM7YUFDdEM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFNRCxzQkFBSSxHQUFKLFVBQU0sT0FBZTtRQUFyQixpQkFNQztRQU5zQixjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLDZCQUFjOztRQUVqQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM1QyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBTTtZQUNwQixLQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFPRCwyQkFBUyxHQUFULFVBQVcsT0FBZTtRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsNkJBQWM7O1FBQ3RDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxzQkFBSSxHQUFKLFVBQU0sTUFBb0IsRUFBRSxJQUFXO1FBQ25DLElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTztRQUNwQixJQUFJLE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBQ3pDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLElBQUk7WUFDQSxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN0RDtRQUFDLE9BQU0sQ0FBQyxFQUFFO1lBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDNUM7SUFDTCxDQUFDO0lBRUwsY0FBQztBQUFELENBQUMsQUEvRkQsSUErRkM7QUEvRlksMEJBQU87QUFpR3BCLGtCQUFlLElBQUksT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgSUV2ZW50SGFuZGxlIHtcclxuICAgIFxyXG4gICAgLyoqIOaYr+WQpuW3suiwg+eUqCAqL1xyXG4gICAgY2FsbGVkOiBib29sZWFuLFxyXG4gICAgXHJcbiAgICAvKiog5piv5ZCm5Y+q6LCD55So5LiA5qyhICovXHJcbiAgICBvbmNlOiBib29sZWFuLFxyXG5cclxuICAgIC8qKiDmjIflkJHmlrnms5UgKi9cclxuICAgIGhhbmRsZXI6IEZ1bmN0aW9uLFxyXG59XHJcbmludGVyZmFjZSBJRXZ0T2JqcyB7XHJcbiAgICBbcHJvcE5hbWU6IHN0cmluZ106IElFdmVudEhhbmRsZVtdXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNZXNzYWdlIHtcclxuICAgIFxyXG4gICAgLyoqIOe8k+WtmOWvueixoSAqL1xyXG4gICAgcHJpdmF0ZSBfZXZ0T2JqczogSUV2dE9ianM7XHJcbiAgICBcclxuICAgIC8qKiDml7bpl7TpgJrnn6UgKi9cclxuICAgIGNvbnN0cnVjdG9yICgpIHtcclxuICAgICAgICB0aGlzLl9ldnRPYmpzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiDnm5HlkKxcclxuICAgICAqIEBwYXJhbSBldnRUeXBlIOWQjeensFxyXG4gICAgICogQHBhcmFtIGhhbmRsZXIg5omn6KGM5L2TXHJcbiAgICAgKiBAcGFyYW0gX29uY2Ug5piv5ZCm5Y+q55u45bqU5LiA5qyhXHJcbiAgICAgKi9cclxuICAgIG9uIChldnRUeXBlOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uLCBvbmNlOmJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZXZ0T2Jqc1tldnRUeXBlXSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ldnRPYmpzW2V2dFR5cGVdID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2V2dE9ianNbZXZ0VHlwZV0ucHVzaCh7XHJcbiAgICAgICAgICAgIGhhbmRsZXIsXHJcbiAgICAgICAgICAgIG9uY2UsXHJcbiAgICAgICAgICAgIGNhbGxlZDogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9mZihldnRUeXBlLCBoYW5kbGVyKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog56e76ZmkXHJcbiAgICAgKiBAcGFyYW0gZXZ0VHlwZSDlkI3np7BcclxuICAgICAqIEBwYXJhbSBoYW5kbGVyIOaJp+ihjOS9k1xyXG4gICAgICovXHJcbiAgICBvZmYgKGV2dFR5cGU/OiBzdHJpbmcsIGhhbmRsZXI/OiBGdW5jdGlvbikge1xyXG4gICAgICAgIHZhciB0eXBlcztcclxuICAgICAgICBpZiAoZXZ0VHlwZSkge1xyXG4gICAgICAgICAgICB0eXBlcyA9IFtldnRUeXBlXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0eXBlcyA9IE9iamVjdC5rZXlzKHRoaXMuX2V2dE9ianMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFsbFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXZ0T2Jqc1t0eXBlXSA9IFtdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJzID0gdGhpcy5fZXZ0T2Jqc1t0eXBlXSB8fCBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXh0SGFuZGxlcnM6IElFdmVudEhhbmRsZVtdID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcnMuZm9yRWFjaCgoZXZ0T2JqKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2dE9iai5oYW5kbGVyICE9PSBoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRIYW5kbGVycy5wdXNoKGV2dE9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldnRPYmpzW3R5cGVdID0gbmV4dEhhbmRsZXJzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5ZON5bqUXHJcbiAgICAgKiBAcGFyYW0gZXZ0VHlwZSBcclxuICAgICAqL1xyXG4gICAgZW1pdCAoZXZ0VHlwZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuX2V2dE9ianNbZXZ0VHlwZV0gfHwgW107XHJcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaCgoZXZ0T2JqKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbChldnRPYmosIGFyZ3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5ZON5bqU56ys5LiA5LiqXHJcbiAgICAgKiBAcGFyYW0gZXZ0VHlwZSBcclxuICAgICAqIEBwYXJhbSBhcmdzIFxyXG4gICAgICovXHJcbiAgICBlbWl0Rmlyc3QgKGV2dFR5cGU6IHN0cmluZywgLi4uYXJnczogYW55W10pIHtcclxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLl9ldnRPYmpzW2V2dFR5cGVdIHx8IFtdO1xyXG4gICAgICAgIHRoaXMuY2FsbChoYW5kbGVyc1swXSwgYXJncyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbCAoZXZ0T2JqOiBJRXZlbnRIYW5kbGUsIGFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKCFldnRPYmopIHJldHVybjtcclxuICAgICAgICBpZiAoZXZ0T2JqLm9uY2UgJiYgZXZ0T2JqLmNhbGxlZCkgcmV0dXJuO1xyXG4gICAgICAgIGV2dE9iai5jYWxsZWQgPSB0cnVlO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGV2dE9iai5oYW5kbGVyICYmIGV2dE9iai5oYW5kbGVyLmFwcGx5KG51bGwsIGFyZ3MpO1xyXG4gICAgICAgIH0gY2F0Y2goZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUuc3RhY2sgfHwgZS5tZXNzYWdlIHx8IGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IG5ldyBNZXNzYWdlKCk7Il19